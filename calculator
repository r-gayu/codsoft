<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Basic Calculator</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="calculator">
        <div class="display" id="display">0</div>
        <button class="button" onclick="appendNumber('7')">7</button>
        <button class="button" onclick="appendNumber('8')">8</button>
        <button class="button" onclick="appendNumber('9')">9</button>
        <button class="button operator" onclick="chooseOperation('+')">+</button>
        <button class="button" onclick="appendNumber('4')">4</button>
        <button class="button" onclick="appendNumber('5')">5</button>
        <button class="button" onclick="appendNumber('6')">6</button>
        <button class="button operator" onclick="chooseOperation('-')">-</button>
        <button class="button" onclick="appendNumber('1')">1</button>
        <button class="button" onclick="appendNumber('2')">2</button>
        <button class="button" onclick="appendNumber('3')">3</button>
        <button class="button operator" onclick="chooseOperation('*')">*</button>
        <button class="button" onclick="appendNumber('0')">0</button>
        <button class="button" onclick="clearDisplay()">C</button>
        <button class="button operator" onclick="calculate()">=</button>
        <button class="button operator" onclick="chooseOperation('/')">/</button>
    </div>

    <script src="script.js"></script>
</body>
</html>




body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    font-family: Arial, sans-serif;
    background-color: rgb(146, 144, 144);
}

.calculator {
    display: grid;
    grid-template-columns: repeat(4, 75px);
    grid-gap: 10px;
    padding: 20px;
    border: 1px solid #ccc;
    border-radius: 10px;
    background-color: #1e1e1e;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.display {
    grid-column: span 4;
    background-color: #2e2e2e;
    border: none;
    border-radius: 5px;
    padding: 20px;
    font-size: 2em;
    text-align: right;
    color: #ffffff;
}

.button {
    background-color: #3e3e3e;
    border: none;
    border-radius: 5px;
    padding: 20px;
    font-size: 1.5em;
    color: #ffffff;
    cursor: pointer;
    transition: background-color 0.2s;
}

.button:hover {
    background-color: #4e4e4e;
}

.operator {
    background-color: #f57c00;
}

.operator:hover {
    background-color: #ff8c00;
}
let currentInput = '0';
let operator = null;
let firstOperand = null;
let awaitingNextNumber = false;

const displayElement = document.getElementById('display');

function appendNumber(number) {
    if (currentInput === '0' || awaitingNextNumber) {
        currentInput = number;
        awaitingNextNumber = false;
    } else {
        currentInput += number;
    }
    updateDisplay();
}

function chooseOperation(op) {
    if (operator !== null) {
        calculate();
    }
    operator = op;
    firstOperand = currentInput;
    awaitingNextNumber = true;
}

function calculate() {
    if (operator === null || awaitingNextNumber) {
        return;
    }
    const secondOperand = currentInput;
    let result;
    switch (operator) {
        case '+':
            result = parseFloat(firstOperand) + parseFloat(secondOperand);
            break;
        case '-':
            result = parseFloat(firstOperand) - parseFloat(secondOperand);
            break;
        case '*':
            result = parseFloat(firstOperand) * parseFloat(secondOperand);
            break;
        case '/':
            result = parseFloat(firstOperand) / parseFloat(secondOperand);
            break;
        default:
            return;
    }
    currentInput = result.toString();
    operator = null;
    firstOperand = null;
    updateDisplay();
}

function clearDisplay() {
    currentInput = '0';
    operator = null;
    firstOperand = null;
    awaitingNextNumber = false;
    updateDisplay();
}

function updateDisplay() {
    displayElement.textContent = currentInput;
}





